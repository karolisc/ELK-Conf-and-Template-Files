input {
   udp {
    port => '5140'
    tags => [pFSense]
    type => [pFSense]
  }
}

filter {
   if "pFSense" in [tags] {
      grok {
        match => [ "message", "\<(?<event_id>(.*?))\>(?<dateTime>(.*?) +(.*?) +(.*?)) +(?<prog>(.*?)): +%{GREEDYDATA:message}"]
        overwrite => ["message"]
      }
      if [event_id] == "134" {
         mutate {
            add_field => {"facility" => 0}
            add_field => {"severity_label" => "info"}
            add_field => {"severity" => 6}
            add_field => {"priority" => 134}
         }
      }

    if "filterlog" in [prog] {
       grok {
         match => [ "message", "(?<rule>(.*?)),(?<sub-rule>(.*?)),(?<anchor>(.*?)),(?<tracker_id>(.*?)),(?<interface>(.*?)),(?<reason>(.*?)),(?<action>(.*?)),(?<direction>(.*?)),(?<ip_version>(.*?)),(?<TOS>(.*?)),(?<ECN>(.*?)),(?<TTL>(.*?)),(?<ID>(.*?)),(?<offset>(.*?)),(?<flags>(.*?)),(?<proto_id>(.*?)),(?<proto_name>(.*?)),%{GREEDYDATA:message}"]
         overwrite => ["message"]
       }

      if "icmp" in [proto_name] {
         grok {
           match => [ "message", "(?<length>(.*?)),(?<src_ip>(.*?)),(?<dst_ip>(.*?)),(?<icmp_type>(.*?)),%{GREEDYDATA:message}"]
         }
      }
      else if "tcp" in [proto_name] {
         grok {
           match => [ "message", "(?<length>(.*?)),(?<src_ip>(.*?)),(?<dst_ip>(.*?)),(?<src_port>(.*?)),(?<dst_port>(.*?)),(?<data_length>(.*?)),(?<tcp_flgs>(.*?)),(?<seq_num>(.*?)),(?<ack>(.*?)),(?<window_size>(.*?)),(?<urg>(.*?)),(?<options>(.*))"]
         }
      }
      
      else if "udp" in [proto_name] {
         grok {
           match => [ "message", "(?<length>(.*?)),(?<src_ip>(.*?)),(?<dst_ip>(.*?)),(?<src_port>(.*?)),(?<dst_port>(.*?)),(?<data_length>(.*))"]
         }
       }
     }
   }

     date {
      match => ["dateTime", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss"]
      target => "@timestamp"
      timezone => "UTC"
     }

     geoip {
       source => "src_ip"
       target => "pfsense_geoip"
  }
}

output {
  elasticsearch {
#    user => elastic
#    password => changeme
    hosts => "127.0.0.1:9200"
    index => "pfsense-logstash-%{+YYYY.MM.dd}"
    template => "/opt/pfsense_template/elasticsearch_pfsense_template.json"
    template_name => "pfsense-logstash"
#  stdout { codec => rubydebug }
# stdout{}
  }
}
