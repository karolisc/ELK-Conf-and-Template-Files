input {
   beats {
     port => "5044"
#     ssl => true
#     ssl_certificate => "/etc/logstash/elkserver61.logstash.crt"
#     ssl_key => "/etc/logstash/elkserver61.logstash.key"
   }
}

filter {

  if "bro" in [tags] {
     if [message] =~ /^#/ {
       drop { }
     }
     else if "bro_stats_log" in [tags] {
       grok {
         match => ["message", "(?<ts>(.*?))\t(?<ts_delta>(.*?))\t(?<app>(.*?))\t(?<uniq_hosts>(.*?))\t(?<hits>(.*?))\t(?<bytes>(.*))"]
         }
       mutate {
        remove_field => ["message"]
        }
     }

     else if "bro_dns_log" in [tags] {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<bro_uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<proto>(.*?))\t(?<trans_id>(.*?))\t(?<rtt>(.*?))\t(?<query>(.*?))\t(?<qclass>(.*?))\t(?<qclass_name>(.*?))\t(?<qtype>(.*?))\t(?<qtype_name>(.*?))\t(?<rcode>(.*?))\t(?<rcode_name>(.*?))\t(?<AA>(.*?))\t(?<TC>(.*?))\t(?<RD>(.*?))\t(?<RA>(.*?))\t(?<Z>(.*?))\t(?<answers>(.*?))\t(?<TTLs>(.*?))\t(?<rejected>(.*))"]
         }
      mutate {
         remove_field => ["message"]
         }
     }

    else if "bro_conn_log" in [tags] {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<bro_uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<proto>(.*?))\t(?<service>(.*?))\t(?<duration>(.*?))\t(?<orig_bytes>(.*?))\t(?<resp_bytes>(.*?))\t(?<conn_state>(.*?))\t(?<local_orig>(.*?))\t(?<local_resp>(.*?))\t(?<missed_bytes>(.*?))\t(?<history>(.*?))\t(?<orig_pkts>(.*?))\t(?<orig_ip_bytes>(.*?))\t(?<resp_pkts>(.*?))\t(?<resp_ip_bytes>(.*?))\t(?<tunnel_parents>(.*?))"]
         }
      mutate {
         remove_field => ["message"]
         }
    }

    else if "bro_files_log" in [tags] {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<bro_uid>(.*?))\t(?<tx_hosts>(.*?))\t(?<rx_hosts>(.*?))\t(?<conn_uids>(.*?))\t(?<source>(.*?))\t(?<depth>(.*?))\t(?<analyzers>(.*?))\t(?<mime_type>(.*?))\t(?<filename>(.*?))\t(?<duration>(.*?))\t(?<local_orig>(.*?))\t(?<is_orig>(.*?))\t(?<seen_bytes>(.*?))\t(?<total_bytes>(.*?))\t(?<missing_bytes>(.*?))\t(?<overflow_bytes>(.*?))\t(?<timedout>(.*?))\t(?<parent_fbro_uid>(.*?))\t(?<md5>(.*?))\t(?<sha1>(.*?))\t(?<sha256>(.*?))\t(?<extracted>(.*))"]
           }
      mutate {
         remove_field => ["message"]
         }
   }

   else if "bro_intel_log" in [tags] {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<bro_uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<fbro_uid>(.*?))\t(?<file_mime_type>(.*?))\t(?<file_desc>(.*?))\t(?<seen.indicator>(.*?))\t(?<seen.indicator_type>(.*?))\t(?<seen.where>(.*?))\t(?<seen.node>(.*?))\t(?<sources>(.*))"]
           }
      mutate {
         remove_field => ["message"]
         }
    }

    else if "bro_notice_log" in [tags]  {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<bro_uid>(.*?))\t(?<src_ip>(.*?))\t(?<id.orig_p>(.*?))\t(?<dst_ip>(.*?))\t(?<id.resp_p>(.*?))\t(?<fbro_uid>(.*?))\t(?<file_mime_type>(.*?))\t(?<file_desc>(.*?))\t(?<proto>(.*?))\t(?<note>(.*?))\t(?<msg>(.*?))\t(?<sub>(.*?))\t(?<src>(.*?))\t(?<dst>(.*?))\t(?<p>(.*?))\t(?<n>(.*?))\t(?<peer_descr>(.*?))\t(?<actions>(.*?))\t(?<suppress_for>(.*?))\t(?<dropped>(.*?))\t(?<remote_location.country_code>(.*?))\t(?<remote_location.region>(.*?))\t(?<remote_location.city>(.*?))\t(?<remote_location.latitude>(.*?))\t(?<remote_location.longitude>(.*))"]
          }
      mutate {
         remove_field => ["message"]
         }
   }

   else if "bro_weird_log" in [tags] {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<bro_uid>(.*?))\t(?<src_ip>(.*?))\t(?<id.orig_p>(.*?))\t(?<dst_ip>(.*?))\t(?<id.resp_p>(.*?))\t(?<name>(.*?))\t(?<addl>(.*?))\t(?<notice>(.*?))\t(?<peer>(.*))"]
          }
      mutate {
         remove_field => ["message"]
         }
   }

   else if "bro_http_log" in [tags] {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<bro_uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<trans_depth>(.*?))\t(?<method>(.*?))\t(?<http_host>(.*?))\t(?<uri>(.*?))\t(?<referrer>(.*?))\t(?<version>(.*?))\t(?<user_agent>(.*?))\t(?<request_body_len>(.*?))\t(?<response_body_len>(.*?))\t(?<status_code>(.*?))\t(?<status_msg>(.*?))\t(?<info_code>(.*?))\t(?<info_msg>(.*?))\t(?<tags>(.*?))\t(?<username>(.*?))\t(?<password>(.*?))\t(?<proxied>(.*?))\t(?<orig_fuids>(.*?))\t(?<orig_filenames>(.*?))\t(?<orig_mime_types>(.*?))\t(?<resp_f_uids>(.*?))\t(?<resp_filenames>(.*?))\t(?<resp_mime_types>(.*))"]
          }
      mutate {
         remove_field => ["message"]
         }
   }

     else if "bro_smb_files_log" in [tags] {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<bro_uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<fuid>(.*?))\t(?<action>(.*?))\t(?<path>(.*?))\t(?<smb_file_name>(.*?))\t(?<size>(.*?))\t(?<prev_name>(.*?))\t(?<times_modified>(.*?))\t(?<times_accessed>(.*?))\t(?<times_created>(.*?))\t(?<times_changed>(.*))"]
         }
      mutate {
         remove_field => ["message"]
         }
     }

     else if "bro_smb_mapping_log" in [tags] {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<bro_uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<path>(.*?))\t(?<service>(.*?))\t(?<native_file_system>(.*?))\t(?<share_type>(.*))"]
         }
      mutate {
         remove_field => ["message"]
         }
     }

     else if "bro_dhcp_log" in [tags] {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<bro_uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<mac>(.*?))\t(?<assigned_ip>(.*?))\t(?<lease_time>(.*?))\t(?<trans_id>(.*))"]
         }
      mutate {
         remove_field => ["message"]
         }
     }

     else if "bro_kerberos_log" in [tags] {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<bro_uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<request_type>(.*?))\t(?<client>(.*?))\t(?<service>(.*?))\t(?<success>(.*?))\t(?<error_msg>(.*?))\t(?<from>(.*?))\t(?<till>(.*?))\t(?<cipher>(.*?))\t(?<forwardable>(.*?))\t(?<renewable>(.*?))\t(?<client_cert_subject>(.*?))\t(?<client_cert_fuid>(.*?))\t(?<server_cert_subject>(.*?))\t(?<server_cert_fuid>(.*))"]
         }
      mutate {
         remove_field => ["message"]
         }
     }

     else if "bro_ntlm_log" in [tags] {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<bro_uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<ntlm_username>(.*?))\t(?<ntlm_hostname>(.*?))\t(?<domainname>(.*?))\t(?<success>(.*?))\t(?<status>(.*))"]
         }
      mutate {
         remove_field => ["message"]
         }
     }


# remove fields with a dash ('-')
  ruby {
    code => "
      eventhash = event.to_hash
      eventhash.each do |key, value|
       if value == '-'
         event.remove(key)
       end
       if value == 'T'
         event.set(key, 'true')
       end
       if value == 'F'
         event.set(key, 'false')
       end
      end
    "
  }

   geoip {
                source => "id.orig_h"
                target => "geoip"
            }

   geoip {
                source => "src"
                target => "geoip_notice_src"
            }


   geoip {
                source => "dst"
                target => "geoip_notice_dst"
            }

   translate {
      field => "id.orig_h"
      destination => "blacklisted_ip"
      dictionary_path => '/opt/dictionary/blacklisted_ip.yaml'
   }

  translate {
     field => "md5"
     destination => "blacklisted_md5"
     dictionary_path => '/opt/dictionary/blacklisted_md5.yaml'
  }
  translate {
     field => "conn_state"
     destination => "conn_state_description"
     dictionary => [
       "S0", "SYN Sent, No Reply",
       "S1", "Conn Est., No Close",
       "S2", "Conn Est., Orig Close Attempt",
       "S3", "Conn Est,. Resp Close Attempt",
       "SF", "Conn Est., Close Success",
       "REJ", "Conn Attempt, Resp RST",
       "RSTO", "Conn Est., Orig RST",
       "RSTR", "Conn Est., Resp RST",
       "RSTOSO", "Orig SYN and RST",
       "RSTRH", "SYN-ACK, RST Seen Only",
       "SH", "Orig SYN, then FIN",
       "SHR", "Resp SYN-ACK, then FIN. No SYN",
       "OTH", "ACK Traffic Only"
     ]
   }
 }
}

output {
    if "bro" in [tags]  {
      elasticsearch {
         document_type => "_doc"
         hosts => ["192.168.229.11:9200", "192.168.229.12:9200", "192.168.229.13:9200"]
         index => "bro-logstash-%{+YYYY.MM.dd}"
         template => "/opt/bro_template/elasticsearch_bro_template.json"
         template_name => "logstash_bro"
      }
#      stdout { codec => rubydebug }
   }
}
