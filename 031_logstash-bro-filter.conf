filter {

  if "bro" in [tags] {
     if [message] =~ /^#/ {
       drop { }
     }
     if[type]=="bro_stats_log" {
       grok {
         match => ["message", "(?<ts>(.*?))\t(?<ts_delta>(.*?))\t(?<app>(.*?))\t(?<uniq_hosts>(.*?))\t(?<hits>(.*?))\t(?<bytes>(.*))"]
         }
     }
    if[type]=="bro_dns_log" {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<proto>(.*?))\t(?<trans_id>(.*?))\t(?<rtt>(.*?))\t(?<query>(.*?))\t(?<qclass>(.*?))\t(?<qclass_name>(.*?))\t(?<qtype>(.*?))\t(?<qtype_name>(.*?))\t(?<rcode>(.*?))\t(?<rcode_name>(.*?))\t(?<AA>(.*?))\t(?<TC>(.*?))\t(?<RD>(.*?))\t(?<RA>(.*?))\t(?<Z>(.*?))\t(?<answers>(.*?))\t(?<TTLs>(.*?))\t(?<rejected>(.*))"]
         }
      }

    if[type]=="bro_conn_log" {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<proto>(.*?))\t(?<service>(.*?))\t(?<duration>(.*?))\t(?<orig_bytes>(.*?))\t(?<resp_bytes>(.*?))\t(?<conn_state>(.*?))\t(?<local_orig>(.*?))\t(?<missed_bytes>(.*?))\t(?<history>(.*?))\t(?<orig_pkts>(.*?))\t(?<orig_ip_bytes>(.*?))\t(?<resp_pkts>(.*?))\t(?<resp_ip_bytes>(.*?))\t(?<tunnel_parents>(.*?))\t(?<orig_cc>(.*?))\t(?<resp_cc>(.*?))\t(?<sensorname>(.*))"]
         }
     }

    if[type]=="bro_files_log" {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<tx_hosts>(.*?))\t(?<rx_hosts>(.*?))\t(?<conn_uids>(.*?))\t(?<source>(.*?))\t(?<depth>(.*?))\t(?<analyzers>(.*?))\t(?<mime_type>(.*?))\t(?<filename>(.*?))\t(?<duration>(.*?))\t(?<local_orig>(.*?))\t(?<is_orig>(.*?))\t(?<seen_bytes>(.*?))\t(?<total_bytes>(.*?))\t(?<missing_bytes>(.*?))\t(?<overflow_bytes>(.*?))\t(?<timedout>(.*?))\t(?<parent_fuid>(.*?))\t(?<md5>(.*?))\t(?<sha1>(.*?))\t(?<sha256>(.*?))\t(?<extracted>(.*))"]
           }
    }

    if[type]=="bro_intel_log" {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<fuid>(.*?))\t(?<file_mime_type>(.*?))\t(?<file_desc>(.*?))\t(?<seen.indicator>(.*?))\t(?<seen.indicator_type>(.*?))\t(?<seen.where>(.*?))\t(?<seen.node>(.*?))\t(?<sources>(.*))"]
           }
    }

    if[type]=="bro_notice_log" {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<src_ip>(.*?))\t(?<id.orig_p>(.*?))\t(?<dst_ip>(.*?))\t(?<id.resp_p>(.*?))\t(?<fuid>(.*?))\t(?<file_mime_type>(.*?))\t(?<file_desc>(.*?))\t(?<proto>(.*?))\t(?<note>(.*?))\t(?<msg>(.*?))\t(?<sub>(.*?))\t(?<src>(.*?))\t(?<dst>(.*?))\t(?<p>(.*?))\t(?<n>(.*?))\t(?<peer_descr>(.*?))\t(?<actions>(.*?))\t(?<suppress_for>(.*?))\t(?<dropped>(.*?))\t(?<remote_location.country_code>(.*?))\t(?<remote_location.region>(.*?))\t(?<remote_location.city>(.*?))\t(?<remote_location.latitude>(.*?))\t(?<remote_location.longitude>(.*))"]
          }
    }

    if[type]=="bro_weird_log" {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<src_ip>(.*?))\t(?<id.orig_p>(.*?))\t(?<dst_ip>(.*?))\t(?<id.resp_p>(.*?))\t(?<name>(.*?))\t(?<addl>(.*?))\t(?<notice>(.*?))\t(?<peer>(.*))"]
          }
   }

    if[type]=="bro_http_log" {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<trans_depth>(.*?))\t(?<method>(.*?))\t(?<host>(.*?))\t(?<uri>(.*?))\t(?<referrer>(.*?))\t(?<version>(.*?))\t(?<user_agent>(.*?))\t(?<request_body_len>(.*?))\t(?<response_body_len>(.*?))\t(?<status_code>(.*?))\t(?<status_msg>(.*?))\t(?<info_code>(.*?))\t(?<info_msg>(.*?))\t(?<filename>(.*?))\t(?<tag_set>(.*?))\t(?<username>(.*?))\t(?<password>(.*?))\t(?<proxied>(.*?))\t(?<orig_fuids>(.*?))\t(?<orig_mime_types>(.*?))\t(?<resp_fuids>(.*?))\t(?<resp_mime_types>(.*))"]
          }
   }

   if[type]=="bro_syslog_log" {
      grok {
         match => ["message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<syslog.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<syslog.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<proto>(.*?))\t(?<facility>(.*?))\t(?<severity>(.*?))\t(?<syslog_msg>(.*))"]
           }
   }

   geoip {
                source => "id.orig_h"
                target => "geoip"
            }

  geoip {
                source => "src"
                target => "geoip_notice_src"
            }


 geoip {
                source => "dst"
                target => "geoip_notice_dst"
            }
 
 geoip {
                source => "syslog.orig_h"
                target => "geoip_syslog_source"
            }

   mutate {
      convert => [ "id.orig_p", "integer" ]
      convert => [ "id.resp_p", "integer" ]
      convert => [ "orig_bytes", "integer" ]
      convert => [ "resp_bytes", "integer" ]
      convert => [ "missed_bytes", "integer" ]
      convert => [ "orig_pkts", "integer" ]
      convert => [ "orig_ip_bytes", "integer" ]
      convert => [ "resp_pkts", "integer" ]
      convert => [ "resp_ip_bytes", "integer" ]
      convert => [ "duration", "float" ]
      convert => [ "qclass", "integer" ]
      convert => [ "qtype", "integer" ]
      convert => [ "rcode", "integer" ]
      convert => [ "Z", "integer" ]
      convert => [ "trans_depth", "integer" ]
      convert => [ "request_body_len", "integer" ]
      convert => [ "response_body_len", "integer" ]
      convert => [ "status_code", "integer" ]
      convert => [ "info_code", "integer" ]
      convert => [ "p", "integer" ]
      convert => [ "n", "integer" ]
      convert => [ "suppress_for", "float" ]
      convert => [ "remote_location.latitude", "float" ]
      convert => [ "remote_location.longitude", "float" ]
      convert => [ "depth", "integer" ]
      convert => [ "seen_bytes", "integer" ]
      convert => [ "total_bytes", "integer" ]
      convert => [ "missing_bytes", "integer" ]
      convert => [ "overflow_bytes", "integer" ]
#      convert => [ "request_body_len", "integer" ]
#      convert => [ "resp_body_len", "integer" ]
#      convert => [ "status_code", "integer" ]
#      convert => [ "info_code", "integer" ]
   }
      if [rtt] == "-" {
         mutate {
            replace => [ "rtt", "0.0" ]
                }
      }
      if [id.orig_p] == "-" {
         mutate {
            replace => [ "id.orig_p", "00" ]
                }
      }
      if [id.resp_p] == "-" {
         mutate {
            replace => [ "id.resp_p", "00" ]
                }
      }
      if [p] == "-" {
         mutate {
            replace => [ "p", "00" ]
                }
      }
      if [n] == "-" {
         mutate {
            replace => [ "n", "00" ]
                }
      }
      if [src] == "-" {
         mutate {
            replace => [ "src", "0.0.0.0" ]
                }
      }
      if [dst] == "-" {
         mutate {
            replace => [ "dst", "0.0.0.0" ]
                }
      }
      if [src_ip] == "-" {
         mutate {
            replace => [ "src_ip", "0.0.0.0" ]
                }
      }
      if [dst_ip] == "-" {
         mutate {
            replace => [ "dst_ip", "0.0.0.0" ]
                }
      }
      if [suppress_for] == "-" {
         mutate {
            replace => [ "suppress_for", "0.0" ]
                }
      }
      if [remote_location.latitude] == "-" {
         mutate {
            replace => [ "remote_location.latitude", "00.00" ]
                }
      }
      if [remote_location.longitude] == "-" {
         mutate {
            replace => [ "remote_location.longitude", "00.00" ]
                }
      }
      if [AA] == "F" {
         mutate {
            replace => [ "AA", "false" ]
                }
      }
      if [AA] == "T" {
         mutate {
            replace => [ "AA", "true" ]
                }
      }
     if [TC] == "F" {
         mutate {
            replace => [ "TC", "false" ]
                }
      }
     if [TC] == "T" {
         mutate {
            replace => [ "TC", "true" ]
                }
      }
     if [RA] == "F" {
         mutate {
            replace => [ "RA", "false" ]
                }
      }
     if [RA] == "T" {
         mutate {
            replace => [ "RA", "true" ]
                }
      }
     if [RD] == "F" {
         mutate {
            replace => [ "RD", "false" ]
                }
      }
     if [RD] == "T" {
         mutate {
            replace => [ "RD", "true" ]
                }
      }
     if [rejected] == "F" {
         mutate {
            replace => [ "rejected", "false" ]
                }
      }
     if [rejected] == "T" {
         mutate {
            replace => [ "rejected", "true" ]
                }
      }
     if [timedout] == "F" {
         mutate {
            replace => [ "timedout", "false" ]
                }
      }
     if [timedout] == "T" {
         mutate {
            replace => [ "timedout", "true" ]
                }
      }
     if [local_orig] == "F" {
         mutate {
            replace => [ "local_orig", "false" ]
                }
      }
      if [local_orig] == "T" {
         mutate {
            replace => [ "local_orig", "true" ]
                }
      }
      if [is_orig] == "F" {
         mutate {
            replace => [ "is_orig", "false" ]
                }
      }
      if [is_orig] == "T" {
         mutate {
            replace => [ "is_orig", "true" ]
                }
      }
      if [dropped] == "F" {
         mutate {
            replace => [ "dropped", "false" ]
                }
      }
      if [dropped] == "T" {
         mutate {
            replace => [ "dropped", "true" ]
                }
      }



  translate {
      field => "id.orig_h"
      destination => "blacklisted_ip"
      dictionary_path => '/opt/dictionary/blacklisted_ip.yaml'
   }

  translate {
     field => "md5"
     destination => "blacklisted_md5"
     dictionary_path => '/opt/dictionary/blacklisted_md5.yaml'
  }
  translate {
     exact => "true"
     regex => "true"
     field => "query"
     destination => "blacklisted_url"
     dictionary_path => '/opt/dictionary/blacklisted_url.yaml'
  }
  translate {
     exact => "true"
     regex => "true"
     field => "id.orig_h"
     destination => "src_node_type"
     dictionary_path => '/opt/dictionary/ip_addresses.yaml'
   }
  translate {
     exact => "true"
     regex => "true"
     field => "id.resp_h"
     destination => "dst_node_type"
     dictionary_path => '/opt/dictionary/ip_addresses.yaml'
  }
 }
}
